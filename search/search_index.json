{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Serverless Private Cargo Registry","text":"<p>Raktar is a private, self-hosted Cargo registry designed around the use of serverless AWS solutions to minimise operational costs. It is particularly suited for organisations already utilising AWS, and who possess sufficient familiarity with the AWS ecosystem to deploy the service using the AWS Cloud Development Kit (CDK).</p> <p>Users of the frontend application are authenticated through AWS IAM Identity Center. While future updates may bring compatibility with other solutions, the current requirement for the frontend is user provisioning via IAM Identity Center.</p> <p>Warning</p> <p>Raktar is work in progress. The core registry logic is functional, but the installation steps may not always be up-to-date. If you have any issues getting started or would like to request new features, please raise a GitHub issue.</p>"},{"location":"#overview","title":"Overview","text":"<p>Raktar is composed of two primary components: a backend, written in Rust, and a frontend, implemented as a standard Typescript and React SPA.</p> <p>The core functionality of Raktar resides entirely within the backend, rendering it technically possible to use the service independently of the frontend application.  However, opting out of the frontend would mean missing out on handy features.  These include a web UI for efficient search and viewing of crates, as well as streamlined token management.</p> <p>Raktar is entirely open-source and free of charge, provided under the MIT license.</p> <p>Features:</p> <ul> <li> Core functionality of an alternative Cargo registry.<ul> <li> Publishing crates.</li> <li> Downloading crates.</li> <li> Authentication using tokens.</li> <li> Support for sparse registries.</li> <li> Stable Rust - this will be available when registry auth   is stabilised.</li> <li> Support for Git-based registries.   There is no plan to support this.</li> </ul> </li> <li> Web UI.<ul> <li> Single Sign-On (SSO) authentication for the application.</li> <li> Self-managed authentication tokens through the UI.</li> <li> Searching crates.</li> <li> Showing crate details, </li> </ul> </li> <li> crates.io mirroring.</li> <li> Hosted documentation, generated using cargo doc.</li> </ul>"},{"location":"#the-backend-service","title":"The Backend Service","text":"<p>Repository: Raktar Core</p> <p>The backend is structured as a serverless API, implemented in Rust, which operates on Lambda and is made accessible via AWS HTTP API Gateway. It employs S3 for crate storage and AWS DynamoDB for the retention of application data.</p> <p>This infrastructure means that the service costs close to nothing when it's not heavily used.</p>"},{"location":"#the-frontend-application","title":"The Frontend Application","text":"<p>Repository: Raktar Frontend</p> <p>The frontend is written using common frontend technologies, such as TypeScript, React and URQL.</p> <p>The frontend is hosted on AWS S3, and it's served through CloudFront.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The backend and the frontend can be separately installed using AWS CDK. There are detailed instructions for both.</p> <p>In order to install the backend, head over to Backend Installation.</p> <p>In order to install the frontend, header over to Frontend Installation.</p>"},{"location":"backend/cdk-deployment/","title":"CDK Deployment","text":""},{"location":"backend/cdk-deployment/#preparations","title":"Preparations","text":"<p>Clone the backend project:</p> <pre><code>git clone git@github.com:raktar-registry/raktar.git\n</code></pre> <p>Install the Python dependencies by running</p> <pre><code>poetry install\n</code></pre> <p>in the project's root directory. This will create a virtualenv in the same directory.</p>"},{"location":"backend/cdk-deployment/#configure-the-deployment","title":"Configure the Deployment","text":"<p>Raktar is hosted on sub-domains following a pre-defined naming convention. All you need to provide is the parent hosted zone. The frontend application will be hosted at <code>crates.{parent_hosted_zone}</code> and the API will be served at <code>api.crates.{parent_hosted_zone}</code>.</p> <p>Apart from the parent hosted zone domain, you'll also need the SSO metadata URL from the manual steps and a custom Cognito domain prefix that's not used by someone else yet.</p> <p>Create a new <code>.env</code> file inside the <code>infrastructure</code> folder with the following contents:</p> <pre><code>HOSTED_ZONE_DOMAIN_NAME=&lt;your-domain&gt;\nSSO_METADATA_URL=&lt;metadata file URL from the manual steps&gt;\n</code></pre>"},{"location":"backend/cdk-deployment/#deployment","title":"Deployment","text":"<p>Run <code>cdk deploy</code> either with the virtualenv activated or using <code>poetry run</code>.</p> <pre><code>poetry run cdk deploy\n</code></pre>"},{"location":"backend/manual-steps/","title":"Manual Steps","text":"<p>There are two things you'll need to do manually before the automated CDK deployment.</p>"},{"location":"backend/manual-steps/#creating-a-public-hosted-zone","title":"Creating a Public Hosted Zone","text":"<p>If you don't have a public hosted zone already for your domain name, create one on Route 53.</p> <p>This step is not automated through the CDK stack as you may already have a hosted zone for your domain. Raktar will be deployed on the <code>crates</code> sub-domain, leaving your primary domain free to use for something else.</p> <p>Info</p> <p>Take note of the hosted zone ID, you'll need this later.</p>"},{"location":"backend/manual-steps/#creating-an-application-in-iam-identity-center","title":"Creating an Application in IAM Identity Center","text":"<p>A SAML-based application in IAM Identity Center will be used for Single Sign-On (SSO) authentication.</p> <p>Add a new custom SAML 2.0 application. Give it a meaningful display name and description.</p> <p></p> <p>Info</p> <p>Take note of the IAM Identity Center SAML metadata file, you'll need this later.</p> <p>The rest of the fields on this page are not possible to fill in until we've deployed the CDK stack. However, it won't let you continue without specifying the ACS URL and the SAML audience, so put in some dummy values.</p> <p></p> <p>Submit the form to create the application.</p>"},{"location":"backend/pre-requisites/","title":"Pre-requisites","text":"<ul> <li>An AWS account.</li> <li>AWS CLI with a profile that has sufficient permissions for CDK deployments.</li> <li>A recent version of Rust.</li> <li>cargo-lambda including zig for cross-compilation.</li> <li>Python 3.9+.</li> <li>Poetry 1.4+ for infrastructure Python dependencies.</li> <li>AWS CDK.</li> <li>A domain name. Raktar will be hosted on a sub-domain, so it's fine to use a domain that's used for other things as well.</li> </ul>"},{"location":"backend/sso-app-setup/","title":"SSO Application Configuration","text":"<p>Now that you have the Cognito user pool ID, it's time to complete the SSO application setup in IAM Identity Center.</p> <p>Open the application in Identity Center that you created during the manual steps. Under <code>Actions</code>, select <code>Edit configuration</code>. Scroll to the bottom and fill in the fields under <code>Application metadata</code>.</p> <p>Application ACS URL: </p> <pre><code>https://auth.crates.&lt;your-domain&gt;/saml2/idpresponse\n</code></pre> <p>Application SAML audience: <pre><code>urn:amazon:cognito:sp:&lt;pool-id&gt;\n</code></pre></p> <p>Submit the configuration.</p> <p>Now go to <code>Edit attribute mappings</code> under <code>Actions</code>. Add a new mapping for <code>Subject</code> with the value <code>${user:subject}</code> and Format <code>transient</code>. Add mappings for  <code>given_name</code> and <code>family_name</code> as well (<code>${user:givenName}</code> and <code>${user:familyName}</code> respectively). At the end, it should look like this:</p> <p></p> <p>Save the changes.</p>"},{"location":"frontend/installation/","title":"Preparations","text":"<p>Clone the frontend project:</p> <pre><code>git clone git@github.com:raktar-registry/app.git\n</code></pre> <p>Install the application dependencies by running</p> <pre><code>npm install\n</code></pre> <p>in the project's root directory.</p>"},{"location":"frontend/installation/#create-the-env-file","title":"Create the .env file","text":"<p>Create an <code>.env</code> file in <code>env/</code>. This file should contain the following variables:</p> <pre><code>VITE_HOSTED_ZONE_DOMAIN=&lt;same as the backend's hosted zone&gt;\nVITE_AWS_REGION=&lt;the region Cognito is in&gt;\nVITE_AWS_USER_POOL_ID=&lt;generated during backend deployment&gt;\nVITE_AWS_USER_POOL_CLIENT_ID=&lt;generated during backend deployment&gt;\n</code></pre>"},{"location":"frontend/installation/#build-the-bundle","title":"Build the bundle","text":"<p>Run <code>npm run build</code> in the root directory - this will generate the static files in <code>dist/</code>.</p>"},{"location":"frontend/installation/#deploy-the-application","title":"Deploy the application","text":"<p>Within the <code>infrastructure/</code> directory, run</p> <pre><code>cdk deploy --all\n</code></pre>"},{"location":"frontend/pre-requisites/","title":"Pre-requisites","text":"<ul> <li>An AWS account with the Raktar backend deployed.</li> <li>A recent version of Node.js.</li> <li>AWS CDK.</li> </ul>"},{"location":"guide/cargo-setup/","title":"How to configure Cargo to use the private registry?","text":"<p>You can name the private registry whatever you want locally. Let's use the name \"raktar\" for example.</p> <p>Add a new entry in the Cargo configuration file for the registry with the index url.</p> <pre><code>[registries.raktar]\nindex = \"{index-url}\"\n</code></pre> <p>You can find the index URL in the <code>help</code> section of the website.</p> <p></p> <p>Cargo configuration files follow a hierarchical structure. Please refer to the official documentation for more details on locating the appropriate configuration file.</p> <p>Run the following command to configure a new token for the registry: <pre><code>cargo login --registry raktar\n</code></pre></p> <p>it will prompt you to paste a new token. Click the URL in the prompt, it should take you to the tokens page within the app, where you can generate a token.</p> <p></p> <p>If you weren't already logged into the web application, the redirect may not work. You can also access the tokens page from within the app through the cog in the top right corner.</p> <p>That should be it - you are now ready to use the registry.</p>"},{"location":"guide/cargo-setup/#how-to-use-dependencies-published-to-the-registry","title":"How to use dependencies published to the registry?","text":"<p>Specifying a dependency in the private registry is as simple as passing in the <code>registry</code> flag in the <code>Cargo.toml</code>, e.g.</p> <pre><code>[dependencies]\nprivate_crate = { registry = \"raktar\", version = \"0.1.1\" }\n</code></pre> <p>Unfortunately, proper authentication for private registries is not stabilised yet in Rust. You need use the nightly build for things to work.</p> <p>Make sure <code>nightly</code> is installed: <pre><code>rustup toolchain install nightly\n</code></pre></p> <p>You can configure your project to use <code>nightly</code> by adding a <code>rust-toolchain.toml</code> to the root directory of the project with</p> <pre><code>[toolchain]\nchannel = \"nightly\"\n</code></pre> <p>The last thing you need to do is passing in the <code>-Z registry-auth</code> flag when running Cargo commands, e.g.</p> <pre><code>cargo build --registry raktar -Z registry-auth\n</code></pre>"},{"location":"guide/cargo-setup/#how-to-publish-a-new-crate","title":"How to publish a new crate?","text":"<pre><code>cargo publish --registry raktar -Z registry-auth\n</code></pre>"}]}